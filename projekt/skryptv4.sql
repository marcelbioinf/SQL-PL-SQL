-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2022-12-07 18:56:29 CET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE adresy (
    kraj                  VARCHAR2(30) NOT NULL,
    miasto                VARCHAR2(30) NOT NULL,
    kod_pocztowy          VARCHAR2(7) NOT NULL,
    ulica                 VARCHAR2(30) NOT NULL,
    numer_domu            VARCHAR2(5) NOT NULL,
    numer_mieszkania      NUMBER(3),
    klienci_numer_klienta NUMBER(6),
    pracownicy_pesel      VARCHAR2(14)
);

ALTER TABLE adresy
    ADD CONSTRAINT arc_1 CHECK ( ( ( pracownicy_pesel IS NOT NULL )
                                   AND ( klienci_numer_klienta IS NULL ) )
                                 OR ( ( klienci_numer_klienta IS NOT NULL )
                                      AND ( pracownicy_pesel IS NULL ) ) );

CREATE UNIQUE INDEX adres__idx ON
    adresy (
        klienci_numer_klienta
    ASC );

CREATE UNIQUE INDEX adres__idxv1 ON
    adresy (
        pracownicy_pesel
    ASC );

CREATE TABLE klienci (
    numer_klienta   NUMBER(6) NOT NULL,
    numer_telefonu VARCHAR2(13) NOT NULL,
    adres_mailowy   VARCHAR2(40) NOT NULL,
    typ             VARCHAR2(20) NOT NULL
);

ALTER TABLE klienci ADD CONSTRAINT klienci_pk PRIMARY KEY ( numer_klienta );

CREATE SEQUENCE klienci_seq
START WITH 1
INCREMENT BY 1;

CREATE TABLE osoby_fizyczne (
    numer_klienta      NUMBER(6) NOT NULL,
    imie               VARCHAR2(20) NOT NULL,
    nazwisko           VARCHAR2(50) NOT NULL,
    data_urodzenia     DATE NOT NULL,
    nazwa_dzialalnosci VARCHAR2(40),
    nip                VARCHAR2(12)
);

ALTER TABLE osoby_fizyczne ADD CONSTRAINT osoba_fizyczna_pk PRIMARY KEY ( numer_klienta );

CREATE TABLE osoby_prawne (
    numer_klienta NUMBER(6) NOT NULL,
    nazwa         VARCHAR2(30) NOT NULL,
    regon         VARCHAR2(9) NOT NULL
);

ALTER TABLE osoby_prawne ADD CONSTRAINT osoba_prawna_pk PRIMARY KEY ( numer_klienta );

CREATE TABLE platnosci (
    rodzaj                      VARCHAR2(20) NOT NULL,
    kwota                       NUMBER(11, 2) NOT NULL,
    kwota_wplacona              NUMBER(11, 2),
    zamowienia_numer_zamowienia NUMBER(5) NOT NULL,
    data_raty                   DATE
);

CREATE UNIQUE INDEX platnosc__idx ON
    platnosci (
        zamowienia_numer_zamowienia
    ASC );

ALTER TABLE platnosci ADD CONSTRAINT platnosc_pk PRIMARY KEY ( zamowienia_numer_zamowienia );

ALTER TABLE platnosci ADD CONSTRAINT platnosc__un UNIQUE ( zamowienia_numer_zamowienia );

CREATE TABLE pracownicy (
    pesel             VARCHAR2(14) NOT NULL,
    imie              VARCHAR2(15) NOT NULL,
    nazwisko          VARCHAR2(20) NOT NULL,
    data_zatrudnienia DATE NOT NULL,
    etat              VARCHAR2(15) NOT NULL,
    placa_podstawowa  NUMBER(7, 2) NOT NULL,
    placa_dodatkowa   NUMBER(6, 2),
    numer_telefonu    VARCHAR2(13),
    adres_mailowy     VARCHAR2(30)
);

ALTER TABLE pracownicy ADD CONSTRAINT pracownik_pk PRIMARY KEY ( pesel );

CREATE TABLE samochody (
    vin                         CHAR(17) NOT NULL,
    zamowienia_numer_zamowienia NUMBER(5),
    marka                       VARCHAR2(20) NOT NULL,
    model                       VARCHAR2(20) NOT NULL,
    rok_produkcji               VARCHAR2(4) NOT NULL,
    typ_nadwozia                VARCHAR2(15),
    kolor                       VARCHAR2(15),
    pojemnosc_silnika           NUMBER(6, 2),
    moc_silnika_hp              NUMBER(4),
    predkosc_maksymalna         NUMBER(3)
);

ALTER TABLE samochody ADD CONSTRAINT samochod_pk PRIMARY KEY ( vin );

CREATE TABLE zamowienia (
    numer_zamowienia      NUMBER(5) NOT NULL,
    liczba_samochodow     NUMBER(5) NOT NULL,
    data_zlozenia         DATE NOT NULL,
    data_realizacji       DATE,
    klienci_numer_klienta NUMBER(6) NOT NULL,
    pracownicy_pesel      VARCHAR2(14) NOT NULL
);

ALTER TABLE zamowienia ADD CONSTRAINT zamowienie_pk PRIMARY KEY ( numer_zamowienia );

CREATE SEQUENCE zamowienia_seq
START WITH 1
INCREMENT BY 1;

ALTER TABLE adresy
    ADD CONSTRAINT adresy_klienci_fk FOREIGN KEY ( klienci_numer_klienta )
        REFERENCES klienci ( numer_klienta );

ALTER TABLE adresy
    ADD CONSTRAINT adresy_pracownicy_fk FOREIGN KEY ( pracownicy_pesel )
        REFERENCES pracownicy ( pesel );

ALTER TABLE osoby_fizyczne
    ADD CONSTRAINT osoba_fizyczna_klient_fk FOREIGN KEY ( numer_klienta )
        REFERENCES klienci ( numer_klienta );

ALTER TABLE osoby_prawne
    ADD CONSTRAINT osoba_prawna_klient_fk FOREIGN KEY ( numer_klienta )
        REFERENCES klienci ( numer_klienta );

ALTER TABLE platnosci
    ADD CONSTRAINT platnosci_zamowienia_fk FOREIGN KEY ( zamowienia_numer_zamowienia )
        REFERENCES zamowienia ( numer_zamowienia );

ALTER TABLE samochody
    ADD CONSTRAINT samochody_zamowienia_fk FOREIGN KEY ( zamowienia_numer_zamowienia )
        REFERENCES zamowienia ( numer_zamowienia );

ALTER TABLE zamowienia
    ADD CONSTRAINT zamowienia_klienci_fk FOREIGN KEY ( klienci_numer_klienta )
        REFERENCES klienci ( numer_klienta );

ALTER TABLE zamowienia
    ADD CONSTRAINT zamowienia_pracownicy_fk FOREIGN KEY ( pracownicy_pesel )
        REFERENCES pracownicy ( pesel );

CREATE OR REPLACE TRIGGER arc_fkarc_1_osoby_fizyczne BEFORE
    INSERT OR UPDATE OF numer_klienta ON osoby_fizyczne
    FOR EACH ROW
DECLARE
    d VARCHAR2(20);
BEGIN
    SELECT
        a.typ
    INTO d
    FROM
        klienci a
    WHERE
        a.numer_klienta = :new.numer_klienta;

    IF ( d IS NULL OR d <> 'Osoba fizyczna' ) THEN
        raise_application_error(-20223, 'FK Osoba_fizyczna_Klient_FK in Table Osoby_fizyczne violates Arc constraint on Table Klienci - discriminator column typ doesn''t have value ''Osoba fizyczna'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_osoby_prawne BEFORE
    INSERT OR UPDATE OF numer_klienta ON osoby_prawne
    FOR EACH ROW
DECLARE
    d VARCHAR2(20);
BEGIN
    SELECT
        a.typ
    INTO d
    FROM
        klienci a
    WHERE
        a.numer_klienta = :new.numer_klienta;

    IF ( d IS NULL OR d <> 'Osoba prawna' ) THEN
        raise_application_error(-20223, 'FK Osoba_prawna_Klient_FK in Table Osoby_prawne violates Arc constraint on Table Klienci - discriminator column typ doesn''t have value ''Osoba prawna'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

--MY OWN CHANGES
CREATE OR REPLACE TRIGGER typ_klienta_trigger BEFORE
    INSERT OR UPDATE OF typ ON klienci
    FOR EACH ROW
WHEN (NEW.typ NOT IN ('Osoba fizyczna', 'Osoba prawna'))
BEGIN 
    raise_application_error(-20010, 'Typ in Klienci must be either ''Osoba prawna'' or ''Osoba fizyczna''');
END;


CREATE OR REPLACE TRIGGER brak_samochodu_trigger BEFORE
    INSERT ON zamowienia
DECLARE 
    vLiczba_samochodow NUMBER;
BEGIN 
    SELECT count(vin) into vLiczba_samochodow from samochody;
    IF vLiczba_samochodow = 0 THEN
        raise_application_error(-20011, 'There must be a car in data base before inserting an order''');
    END IF;
END;


CREATE OR REPLACE PROCEDURE Wyswietl_dostepne IS
    CURSOR Csamochody IS (select * from samochody where zamowienia_numer_zamowienia IS NULL);
BEGIN
    DBMS_output.put_line('DostÄ™pne samochody:');
    for Cauto in Csamochody LOOP
        DBMS_output.put_line('VIN: ' || Cauto.vin || '  Marka: ' || Cauto.marka || '  Model: ' || Cauto.model || '  Rok produkcji: ' || Cauto.rok_produkcji );
    END LOOP;
END;


CREATE OR REPLACE PROCEDURE Dodaj_nr_zamowienia (pnr_zamowienia IN NUMBER, pNumer_vin IN VARCHAR) IS
BEGIN
    UPDATE samochody 
    SET zamowienia_numer_zamowienia = pnr_zamowienia
    where vin like pNumer_vin;
END;


CREATE OR REPLACE PACKAGE Obliczenia AS
    vSumaryczna_kwota_pracownika NUMBER;
    PROCEDURE Oblicz_sum_kwote_pracownika(pesel VARCHAR);
    FUNCTION Oblicz_premie_miesieczna
    RETURN number;
    FUNCTION Oblicz_rate(kwota number, liczba_rat number, oprocentowanie number)
    RETURN number;
END Obliczenia;

CREATE OR REPLACE PACKAGE BODY Obliczenia AS
    PROCEDURE Oblicz_sum_kwote_pracownika(pesel VARCHAR) IS
    BEGIN
        Select sum(p.KWOTA) into vSumaryczna_kwota_pracownika
        from zamowienia z inner join platnosci p on z.numer_zamowienia = p.zamowienia_numer_zamowienia
        where z.Pracownicy_PESEL = pesel;
    END Oblicz_sum_kwote_pracownika;
    FUNCTION Oblicz_premie_miesieczna
    RETURN number AS
    BEGIN
        return vSumaryczna_kwota_pracownika * 0.07;
    END Oblicz_premie_miesieczna;
    FUNCTION Oblicz_rate(kwota number, liczba_rat number, oprocentowanie number)
    RETURN number AS
    BEGIN
        return (kwota / liczba_rat) + (kwota / liczba_rat * (oprocentowanie / 100));
    END Oblicz_rate;
END Obliczenia;


CREATE BITMAP INDEX typ_klienta_idx on klienci(typ);



-- CREATE OR REPLACE TRIGGER dodaj_nr_zamowienia_trigger AFTER
--     INSERT ON zamowienia
--     FOR EACH ROW
-- DECLARE 
--     vNumer_VIN CHAR(17);
--     vLiczba_aut NUMBER := :NEW.liczba_samochodow;
-- BEGIN 
--     WHILE vLiczba_aut > 0
--     LOOP
--         vNumer_VIN := '&numer';
--         UPDATE samochody
--         SET zamowienia_numer_zamowienia = :NEW.numer_zamowienia
--         WHERE vin = vNumer_VIN;
--         vLiczba_aut := vLiczba_aut - 1;
--     END LOOP;
-- END;



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             3
-- ALTER TABLE                             17
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           2
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
